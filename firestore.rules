rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Usernames collection (for unique usernames)
    match /usernames/{username} {
      allow read: if true; // Anyone can check if a username exists
      // Only the user associated with this username entry can create it initially.
      // Assumes username is reserved during signup.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Generally, updates/deletes aren't needed or allowed for this structure.
      allow update, delete: if false;
    }

    // User data collection
    match /users/{userId} {
      // Allow user to read/write/delete their own main document
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      // Allow user to create their own document on signup
      allow create: if request.auth != null && request.auth.uid == userId;

      // Inbox subcollection
      match /inbox/{messageId} {
         // Allow user full control over their own inbox messages
         allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Feedback collection
    match /feedback/{feedbackId} {
       // Any authenticated user can create (submit) feedback
       allow create: if request.auth != null;
       // Only Admin can read/update feedback status/replies
       allow read, update: if request.auth != null && request.auth.uid == '04amtH9UgfTWxPH0rqn2quaKiNf1'; // Use actual ADMIN_UID
       // Feedback deletion generally disallowed through rules
       allow delete: if false;
    }

    // Courses collection - NEW RULES
    match /courses/{courseId} {

      // --- READ ---
      // Anyone authenticated can read 'approved' courses.
      // Admin can read *any* course regardless of status.
      allow read: if request.auth != null &&
                    (resource.data.status == 'approved' || request.auth.uid == '04amtH9UgfTWxPH0rqn2quaKiNf1'); // Use actual ADMIN_UID

      // --- CREATE ---
      // Any authenticated user can create a course document.
      // Must set creatorUid to their own UID.
      // Must set status correctly (pending for users, approved allowed for admin).
      // Must include required fields (name, majorTag).
      // Must initialize all expected fields.
      allow create: if request.auth != null
                    && request.resource.data.creatorUid == request.auth.uid
                    && request.resource.data.name is string && request.resource.data.name.size() > 0
                    && request.resource.data.majorTag is string && request.resource.data.majorTag.size() > 0
                    && (
                       (request.resource.data.status == 'pending' && request.auth.uid != '04amtH9UgfTWxPH0rqn2quaKiNf1') // User -> pending
                       || (request.resource.data.status == 'approved' && request.auth.uid == '04amtH9UgfTWxPH0rqn2quaKiNf1') // Admin -> approved
                     )
                    // Ensure all fields defined in ui_courses.js (addCourseToFirestore) are present
                    && request.resource.data.keys().hasAll(['creatorUid', 'creatorName', 'createdAt', 'status', 'name', 'majorTag', 'subjectTag', 'lecturePlaylistUrl', 'textbookUrl', 'reportedBy', 'reportReason']);

      // --- UPDATE ---
      // Scenario 1: Admin Approval/Rejection
      // Admin can change status (to 'approved' or 'rejected').
      // If changing status, admin must also clear report fields.
      allow update: if request.auth.uid == '04amtH9UgfTWxPH0rqn2quaKiNf1' // Is Admin
                    && request.resource.data.status != resource.data.status // Status is changing
                    && request.resource.data.status in ['approved', 'rejected'] // New status is valid
                    // Only these specific fields are allowed to change in this rule path
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reportReason', 'reportedBy'])
                    // When approving/rejecting, report fields MUST be cleared/empty in the incoming data
                    && request.resource.data.reportReason == null
                    && request.resource.data.reportedBy == [];

      // Scenario 2: User Reporting an 'approved' course
      // Any authenticated user (not the creator) can change status to 'reported',
      // add a reason, and add themselves to 'reportedBy'.
      allow update: if request.auth != null // Is Authenticated
                    && request.auth.uid != resource.data.creatorUid // Not the creator
                    && resource.data.status == 'approved' // Can only report 'approved' courses
                    && request.resource.data.status == 'reported' // Setting status to 'reported'
                    && request.resource.data.reportReason is string && request.resource.data.reportReason.size() > 0 // Reason is required
                    // Check ONLY these fields are changing compared to the existing document
                    && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'reportReason', 'reportedBy'])
                    // Check that reportedBy is simply adding the current user's ID
                    && request.resource.data.reportedBy == resource.data.reportedBy.concat([request.auth.uid]);

      // --- DELETE ---
      // Only Admin can delete courses.
      allow delete: if request.auth != null && request.auth.uid == '04amtH9UgfTWxPH0rqn2quaKiNf1'; // Use actual ADMIN_UID
    }
  }
}