rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper function for Admin Check ---
    function isAdmin() {
      // Ensure this is your correct Admin Firebase User ID
      return request.auth != null && request.auth.uid == "04amtH9UgfTWxPH0rqn2quaKiNf1";
    }

    // --- Usernames: Publicly readable, Owner creates, Admin creates/deletes ---
    match /usernames/{username} {
        allow read: if true;
        allow create: if request.auth != null &&
                         (request.resource.data.userId == request.auth.uid || isAdmin()); // Owner or Admin creates
        allow delete: if request.auth != null && isAdmin(); // Only Admin deletes
        allow update: if false; // Prevent updates
    }

    // --- Users: Owner or Admin can manage profile and subcollections ---
    match /users/{userId} {
      // Allow owner or admin to read/delete profile
      allow read, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Define update permissions more granularly
      allow update: if request.auth != null &&
                       (request.auth.uid == userId || // Owner can update their own doc (implicitly all allowed fields)
                        (isAdmin() && // Admin can update specific fields
                         request.resource.data.diff(resource.data).affectedKeys()
                           .hasOnly(['username', 'displayName', 'photoURL', 'completedCourseBadges', 'onboardingComplete', 'email', 'status', 'lastSelectedSubjectId']) // List fields admin is allowed to modify. Added lastSelectedSubjectId
                        )
                       );
      // User can only create their own doc initially
      allow create: if request.auth != null && request.auth.uid == userId;

      // --- Subcollection Rules ---

      // Inbox: Owner manages read/update/delete, Admin can send (create)
      match /inbox/{messageId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && isAdmin();
      }

      // User-specific Formula Sheets: Owner manages read/write/delete, Admin can read
      match /userFormulaSheets/{sheetId} {
          allow read, write, delete: if request.auth != null && request.auth.uid == userId;
          allow read: if request.auth != null && isAdmin(); // Allow admin read (override write/delete)
      }

      // User-specific Chapter Summaries: Owner manages read/write/delete, Admin can read
      match /userChapterSummaries/{summaryId} {
          allow read, write, delete: if request.auth != null && request.auth.uid == userId;
          allow read: if request.auth != null && isAdmin(); // Allow admin read (override write/delete)
      }

      // Note: userNotes map is covered by the parent /users/{userId} rule
    }

    // --- User Course Progress: Owner or Admin can manage ---
    match /userCourseProgress/{userId}/{courses=**} { // Match any document in subcollections
       allow read, write, create, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // --- User Exam Storage: Owner manages read/write/create/delete, Admin can read ---
    match /userExams/{userId}/{exams=**} { // Match any document in subcollections
       allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
       allow read: if request.auth != null && isAdmin(); // Allow admin read (override)
       // Admins cannot write/delete other users' exams with this rule.
    }

    // --- Feedback: Auth users create, Admin manages read/update/delete ---
    match /feedback/{feedbackId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && isAdmin();
    }

    // --- Exam Issues: Auth users create, Admin manages read/update/delete ---
    match /examIssues/{issueId} {
       allow create: if request.auth != null;
       allow read, update, delete: if request.auth != null && isAdmin();
    }

    // --- Course Definitions: ---
    match /courses/{courseId} {
      // Allow public read for all courses
      allow read: if true;

      // Allow authenticated users to CREATE courses, but only with specific fields
      allow create: if request.auth != null &&
                       request.resource.data.keys().hasOnly([
                         'name', 'description', 'majorTag', 'subjectTag', 'youtubePlaylistUrls', // User fields
                         'creatorUid', 'creatorName', 'createdAt', 'status', // System/Required fields
                         'reportedBy', 'reportReason' // Fields needed for reporting init
                       ]) &&
                       request.resource.data.creatorUid == request.auth.uid && // Creator must be current user
                       request.resource.data.status == 'pending'; // Must start as pending

      // Allow Admins to UPDATE any field (including status, technical details)
      allow update: if request.auth != null && isAdmin();

      // Allow Admins to DELETE courses
      allow delete: if request.auth != null && isAdmin();
    }

    // --- Shared Notes: Public read, Auth create, Owner/Admin manage update/delete ---
    match /sharedCourseNotes/{noteId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // Creator sets correct UID
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
    }

    // --- Admin Tasks: Only Admin can manage ---
    match /adminTasks/{taskId} {
      // Admin can perform all actions (read, write, create, delete)
      allow read, write, create, delete: if request.auth != null && isAdmin();
      // No other users should have access
    }

    // --- Global Chat Messages ---
    match /globalChatMessages/{messageId} {
      // *** MODIFIED RULE *** Logged-in users can read and create messages
      allow read, create: if request.auth != null && request.auth.uid != null; // Added explicit uid check
      // Only the message owner OR an admin can delete
      allow delete: if request.auth != null && (request.auth.uid == resource.data.senderId || isAdmin());
      // Prevent updates
      allow update: if false;
    }

    // --- Deprecated Global Caches: Read allowed, Write blocked (except Admin) ---
    match /globalFormulaSheets/{sheetId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin();
    }
    match /globalChapterSummaries/{summaryId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin();
    }
  }
}