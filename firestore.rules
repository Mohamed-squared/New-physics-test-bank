rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isLoggedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }

    function isPrimaryAdminUid(uid) {
      return uid == "04amtH9UgfTWxPH0rqn2quaKiNf1"; // Ensure this is your actual primary admin UID
    }

    function isPrimaryAdmin() {
      return isLoggedIn() && isPrimaryAdminUid(request.auth.uid);
    }

    function isAssignedAdmin(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) &&
             get(/databases/$(database)/documents/users/$(uid)).data.isAdmin == true;
    }

    // Checks if a user with a given uid has the isAdmin flag set to true in their user document.
    // IMPORTANT: This function relies on the ability to read the user document /users/$(uid).
    // If the requesting user does not have read access to that document (e.g., due to the
    // `allow read: if isOwner(userId) || isAdmin();` rule on /users/{userId}), this function
    // will effectively return false, even if the target user *is* an admin.
    // Thus, checking another user's admin status via this function will only succeed if the
    // requester is already an admin themselves (or the owner, which is less common for this check).
    function isAssignedAdmin(uid) {
      return exists(/databases/$(database)/documents/users/$(uid)) &&
             get(/databases/$(database)/documents/users/$(uid)).data.isAdmin == true;
    }

    function isAdmin() {
       return isLoggedIn() && (isPrimaryAdminUid(request.auth.uid) || isAssignedAdmin(request.auth.uid));
    }

    function isValidString(str, minLength, maxLength) {
      return str is string && str.size() >= minLength && str.size() <= maxLength;
    }

    function isValidNumber(num, minVal, maxVal) {
        return num is number && num >= minVal && num <= maxVal;
    }

    function allowedUserUpdateFieldsOwner() {
      return [
        'displayName', 'photoURL', 'onboardingComplete', 'lastSelectedSubjectId',
        'appData', 'userNotes', 'userAiChatSettings', 'completedCourseBadges',
        'lastAppDataUpdate', 'userSettings', 'username', 'email'
      ];
    }

    function allowedAdminUpdateFieldsOnOtherUser() {
      return allowedUserUpdateFieldsOwner().concat(['isAdmin', 'credits', 'username']);
    }

    function allowedAdminUpdateFieldsOnSelf() {
      return allowedUserUpdateFieldsOwner().concat(['credits']);
    }

    function allowedCourseProgressUpdateFieldsAdmin() {
        return [
            'enrollmentDate', 'baseMediocrePace', 'courseStudiedChapters', 'pdfProgress',
            'watchedVideoDurations', 'lastActivityDate', 'assignmentScores', 'weeklyExamScores',
            'midcourseExamScores', 'finalExamScores', 'lastSkipExamScore', 'skipExamAttempts',
            'dailyProgress', 'status', 'totalMark', 'grade', 'completionDate',
            'userRating', 'userReview', 'selectedPace', 'customPaceDays', 'currentPace',
            'currentChapterTarget', 'currentDayObjective', 'attendanceScore', 'extraPracticeBonus',
            'enrollmentMode', 'testGenBonus'
        ];
    }

    function allowedCourseProgressUpdateFieldsOwner() {
        return [
            'lastActivityDate', 'pdfProgress', 'watchedVideoDurations',
            'courseStudiedChapters', 'dailyProgress', 'userRating', 'userReview',
            'status',
            'selectedPace', 'customPaceDays',
            'testGenBonus'
        ];
    }

    function isValidExamTypeConfig(config) {
      return config is map &&
             config.keys().hasAll(['questions', 'durationMinutes', 'mcqRatio', 'textSourceRatio']) &&
             config.keys().size() == 4 &&
             config.questions is number && config.questions >= 1 &&
             config.durationMinutes is number && config.durationMinutes >= 5 &&
             config.mcqRatio is number && config.mcqRatio >= 0 && config.mcqRatio <= 1 &&
             config.textSourceRatio is number && config.textSourceRatio >= 0 && config.textSourceRatio <= 1;
    }

    function isValidTestGenConfig(config) {
      return config is map &&
             config.keys().hasAll(['textMcqCount', 'textProblemCount', 'lectureMcqCounts', 'lectureProblemCounts', 'timingOption']) &&
             // Check if customDurationMinutes exists only if timingOption is 'custom'
             (config.timingOption != 'custom' || (config.timingOption == 'custom' && config.customDurationMinutes is number && config.customDurationMinutes >= 10)) &&
             config.textMcqCount is number && config.textMcqCount >= 0 &&
             config.textProblemCount is number && config.textProblemCount >= 0 &&
             config.lectureMcqCounts is map &&
             config.lectureProblemCounts is map &&
             config.timingOption is string && (config.timingOption == 'default' || config.timingOption == 'calculated' || config.timingOption == 'custom');
             // Note: Removed the final 'true;' as it's implicit if all above pass.
             // Making customDurationMinutes conditional within the main check is more robust.
    }

    // --- Usernames Registry ---
    match /usernames/{usernameDocId} {
      allow read: if true;
      allow create: if isLoggedIn() &&
                       request.resource.data.userId is string &&
                       request.resource.data.keys().hasOnly(['userId', 'username']) &&
                       request.resource.data.username.lower() == usernameDocId &&
                       ( (request.resource.data.userId == request.auth.uid) ||
                         isPrimaryAdmin()
                       );
      allow update: if false;
      // MODIFIED: Allow owner of the username record (by checking userId field) or primary admin to delete
      allow delete: if isLoggedIn() &&
                       ( (request.auth.uid == resource.data.userId) || // Check current user against userId field in doc
                         isPrimaryAdmin()
                       );
    }

    // --- Users Collection ---
    match /users/{userId} {
      // Read access to a user document is granted if the requester is the owner of the document
      // or if the requester is an admin (either primary or assigned).
      // Note: This rule means that the `isAssignedAdmin` function will only successfully check
      // another user's admin status if the current user is already an admin.
      // If a non-admin tries to use a rule that calls `isAssignedAdmin` on another user's ID,
      // the `get()` call within `isAssignedAdmin` will be denied, and the function will return false.
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isLoggedIn() && request.auth.uid == userId &&
                      (request.resource.data.email == request.auth.token.email || request.resource.data.email == null) &&
                      isValidString(request.resource.data.username, 3, 20) &&
                      isValidString(request.resource.data.displayName, 1, 50) &&
                      (request.resource.data.photoURL is string || request.resource.data.photoURL == null) &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.onboardingComplete == false &&
                      request.resource.data.isAdmin == isPrimaryAdminUid(userId) && // Crucial
                      request.resource.data.credits is number && request.resource.data.credits == 0 &&
                      request.resource.data.appData is map && // Must be a map
                      request.resource.data.appData.subjectProgress is map && // appData must contain a 'subjects' map
                      request.resource.data.userNotes is map && // Must be a map
                      request.resource.data.userAiChatSettings is map && // Must be a map
                      isValidString(request.resource.data.userAiChatSettings.primaryModel, 1, 100) && // Must exist and be valid
                      isValidString(request.resource.data.userAiChatSettings.fallbackModel, 1, 100) && // Must exist and be valid
                      request.resource.data.userAiChatSettings.customSystemPrompts is map && // Must exist and be a map
                      request.resource.data.completedCourseBadges is list && // Must be a list
                     // ** ADDED: userSettings structure checks **
                      request.resource.data.userSettings is map &&
                      request.resource.data.userSettings.experimentalFeatures is map &&
                      // Ensure experimentalFeatures sub-fields are booleans if they exist (optional: add specific checks if needed)
                      (request.resource.data.userSettings.experimentalFeatures.globalChat == null || request.resource.data.userSettings.experimentalFeatures.globalChat is bool) &&
                      (request.resource.data.userSettings.experimentalFeatures.marketplace == null || request.resource.data.userSettings.experimentalFeatures.marketplace is bool) &&
                      (request.resource.data.userSettings.experimentalFeatures.musicAndSounds == null || request.resource.data.userSettings.experimentalFeatures.musicAndSounds is bool) &&
                      request.resource.data.keys().hasAll([ // Exactly these 12 keys, no more, no less
                        'email', 'username', 'displayName', 'photoURL', 'createdAt',
                        'onboardingComplete', 'isAdmin', 'credits', 'appData', 'userNotes',
                        'userAiChatSettings', 'completedCourseBadges', 'userSettings' 
                      ]) && request.resource.data.keys().size() == 13;
    

      allow delete: if isOwner(userId) || isPrimaryAdmin(); // This is for the main user document
      allow update: if isLoggedIn() && (
                       ( isOwner(userId) &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'credits', 'createdAt']) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedUserUpdateFieldsOwner().concat(['username', 'email'])) && 
                        (request.resource.data.username == null || isValidString(request.resource.data.username, 3, 20)) &&
                        (request.resource.data.email == null || (request.resource.data.email is string && request.resource.data.email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"))) && 
                         (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                         (request.resource.data.appData == null || request.resource.data.appData is map) &&
                         (request.resource.data.userNotes == null || request.resource.data.userNotes is map) &&
                         (request.resource.data.appData.subjectProgress is map) &&
                         (request.resource.data.userAiChatSettings == null || (
                            request.resource.data.userAiChatSettings is map &&
                            isValidString(request.resource.data.userAiChatSettings.primaryModel, 1, 100) &&
                            isValidString(request.resource.data.userAiChatSettings.fallbackModel, 1, 100) &&
                            request.resource.data.userAiChatSettings.customSystemPrompts is map
                         )) &&
                        (request.resource.data.userSettings == null || 
                         (request.resource.data.userSettings is map &&
                          (request.resource.data.userSettings.experimentalFeatures == null || request.resource.data.userSettings.experimentalFeatures is map)
                         )
                        )
                       ) ||
                       ( isAdmin() && userId != request.auth.uid &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'createdAt']) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedAdminUpdateFieldsOnOtherUser()) &&
                         (request.resource.data.displayName == null || isValidString(request.resource.data.displayName, 1, 50)) &&
                         (request.resource.data.username == null || isValidString(request.resource.data.username, 3, 20)) &&
                         (request.resource.data.isAdmin == null || request.resource.data.isAdmin is bool) &&
                         (request.resource.data.credits == null || (request.resource.data.credits is number && request.resource.data.credits >= 0)) &&
                         (request.resource.data.appData == null || request.resource.data.appData is map)
                       ) ||
                       ( isAdmin() && userId == request.auth.uid &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'email', 'createdAt', 'username']) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedAdminUpdateFieldsOnSelf()) &&
                         (request.resource.data.credits == null || (request.resource.data.credits is number && request.resource.data.credits >= 0))
                       )
                     );

      match /inbox/{messageId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if (isAdmin() && request.resource.data.senderId == request.auth.uid) || request.resource.data.senderId == 'system';
        allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']) && request.resource.data.isRead == true;
        allow delete: if isOwner(userId) || isAdmin();
      }
      match /userFormulaSheets/{sheetId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create, update: if isOwner(userId) && isValidString(request.resource.data.content, 0, 100000) && request.resource.data.lastUpdated == request.time;
        allow delete: if isOwner(userId) || isAdmin();
      }
      match /userChapterSummaries/{summaryId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create, update: if isOwner(userId) && isValidString(request.resource.data.content, 0, 100000) && request.resource.data.lastUpdated == request.time;
        allow delete: if isOwner(userId) || isAdmin();
      }
      match /creditLog/{logId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isLoggedIn() &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.change is number &&
                         request.resource.data.newBalance is number &&
                         isValidString(request.resource.data.reason, 1, 200) &&
                         request.resource.data.performedBy is string &&
                         request.resource.data.keys().hasOnly(['timestamp', 'change', 'newBalance', 'reason', 'performedBy']) &&
                         ( (request.resource.data.performedBy == request.auth.uid && request.auth.uid == userId) ||
                           (request.resource.data.performedBy == 'system') ||
                           (isAdmin() && request.resource.data.performedBy == request.auth.uid)
                         );
        allow update: if false; // Keep update false
        // MODIFIED: Allow owner or admin to delete credit logs.
        // If these are sensitive audit logs, you might reconsider client-side deletion.
        // But for full account data removal, this is often necessary.
        allow delete: if isOwner(userId) || isPrimaryAdmin();
      }
      match /aiChatSessions/{sessionId} {
        allow read, delete: if isOwner(userId);
        allow create: if isOwner(userId) &&
                         isValidString(request.resource.data.name, 1, 100) &&
                         request.resource.data.history is list &&
                         request.resource.data.createdAt == request.time &&
                         request.resource.data.lastModified == request.time &&
                         isValidString(request.resource.data.systemPromptKey, 1, 100) &&
                         request.resource.data.keys().hasOnly(['name', 'history', 'createdAt', 'lastModified', 'systemPromptKey']);
        allow update: if isOwner(userId) &&
                         request.resource.data.history is list &&
                         request.resource.data.lastModified == request.time &&
                         request.resource.data.createdAt == resource.data.createdAt &&
                         request.resource.data.name == resource.data.name &&
                         request.resource.data.systemPromptKey == resource.data.systemPromptKey &&
                         request.resource.data.keys().hasOnly(['name', 'history', 'createdAt', 'lastModified', 'systemPromptKey']);
      }
    } // End /users/{userId}

    // MODIFIED: Added rule for the parent document userCourseProgress/{userId}
    match /userCourseProgress/{userId} {
      // This rule is for the document AT userCourseProgress/{userId} itself, if it exists.
      // Your client code might be trying to delete this document after clearing the 'courses' subcollection.
      allow read: if isLoggedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isLoggedIn() && (isOwner(userId) || isPrimaryAdmin());
      // No create/update rules for this parent doc unless you need them.

      match /courses/{courseId} {
        allow read: if isLoggedIn() && (isOwner(userId) || isAdmin());
        allow create: if isLoggedIn() && isOwner(userId) &&
                 request.resource.data.courseId == courseId &&
                 request.resource.data.status == 'enrolled' &&
                 request.resource.data.enrollmentMode is string &&
                   (request.resource.data.enrollmentMode == 'full' || request.resource.data.enrollmentMode == 'viewer') &&
                 request.resource.data.selectedPace is string &&
                 (request.resource.data.customPaceDays == null || (request.resource.data.customPaceDays is number && request.resource.data.customPaceDays >= 7)) &&
                 request.resource.data.baseMediocrePace == null &&
                 request.resource.data.currentPace == null &&
                 request.resource.data.currentChapterTarget == 1 &&
                 request.resource.data.currentDayObjective is string &&
                 request.resource.data.courseStudiedChapters is list && request.resource.data.courseStudiedChapters.size() == 0 &&
                 request.resource.data.dailyProgress is map && request.resource.data.dailyProgress.size() == 0 &&
                 request.resource.data.watchedVideoUrls is map && request.resource.data.watchedVideoUrls.size() == 0 && // This field seems to be missing in your allowed fields list
                 request.resource.data.watchedVideoDurations is map && request.resource.data.watchedVideoDurations.size() == 0 &&
                 request.resource.data.pdfProgress is map && request.resource.data.pdfProgress.size() == 0 &&
                 request.resource.data.skipExamAttempts is map && request.resource.data.skipExamAttempts.size() == 0 &&
                 request.resource.data.lastSkipExamScore is map && request.resource.data.lastSkipExamScore.size() == 0 &&
                 request.resource.data.assignmentScores is map && request.resource.data.assignmentScores.size() == 0 &&
                 request.resource.data.weeklyExamScores is map && request.resource.data.weeklyExamScores.size() == 0 &&
                 request.resource.data.midcourseExamScores is map && request.resource.data.midcourseExamScores.size() == 0 &&
                 request.resource.data.finalExamScores == null &&
                 request.resource.data.attendanceScore == 100 &&
                 request.resource.data.extraPracticeBonus == 0 &&
                 request.resource.data.testGenBonus == 0 &&
                 request.resource.data.totalMark == null &&
                 request.resource.data.grade == null &&
                 request.resource.data.completionDate == null &&
                 request.resource.data.enrollmentDate == request.time &&
                 request.resource.data.lastActivityDate == request.time &&
                 request.resource.data.keys().hasOnly([
                   'courseId', 'status', 'enrollmentMode',
                   'selectedPace', 'customPaceDays', 'baseMediocrePace', 'currentPace',
                   'currentChapterTarget', 'currentDayObjective',
                   'courseStudiedChapters', 'dailyProgress',
                   'watchedVideoUrls', 'watchedVideoDurations', 'pdfProgress', // Added watchedVideoUrls here
                   'skipExamAttempts', 'lastSkipExamScore',
                   'assignmentScores', 'weeklyExamScores', 'midcourseExamScores', 'finalExamScores',
                   'attendanceScore', 'extraPracticeBonus', 'testGenBonus',
                   'totalMark', 'grade', 'completionDate',
                   'enrollmentDate', 'lastActivityDate'
                 ]);
        allow update: if isLoggedIn() && (
                        ( isOwner(userId) &&
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedCourseProgressUpdateFieldsOwner()) &&
                          request.resource.data.courseId == resource.data.courseId &&
                          request.resource.data.enrollmentDate == resource.data.enrollmentDate
                        ) ||
                        ( isAdmin() &&
                          request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedCourseProgressUpdateFieldsAdmin()) &&
                          request.resource.data.courseId == resource.data.courseId &&
                          (request.resource.data.enrollmentDate == resource.data.enrollmentDate || request.resource.data.enrollmentDate is timestamp) &&
                          (request.resource.data.totalMark == null || request.resource.data.totalMark is number) &&
                          (request.resource.data.completionDate == null || request.resource.data.completionDate is timestamp)
                        )
                      );
        allow delete: if isLoggedIn() && (isOwner(userId) || isPrimaryAdmin());
      }
    } // End /userCourseProgress/{userId}

    // MODIFIED: Added rule for the parent document userExams/{userId}
    match /userExams/{userId} {
      // This rule is for the document AT userExams/{userId} itself, if it exists.
      allow read: if isLoggedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isLoggedIn() && isOwner(userId); // Or isPrimaryAdmin() if admins should also be able to clear this
      // No create/update rules for this parent doc unless you need them.

      match /exams/{examId} {
        allow read: if isLoggedIn() && (isOwner(userId) || isAdmin());
        // Your original rule had two 'userExams/{userId}/exams/{examId}' blocks. I'm merging/using the more detailed one.
        // This one allows create with specific fields.
        allow create: if isLoggedIn() && isOwner(userId) &&
                         request.resource.data.userId == userId &&
                         request.resource.data.examId == examId && // examId is typically generated client-side
                         (request.resource.data.courseId is string || request.resource.data.courseId == null) &&
                         
                         request.resource.data.questions is list &&
                         request.resource.data.answers is map &&
                         request.resource.data.markingResults is map &&
                         request.resource.data.score is number && request.resource.data.score >= 0 &&
                         request.resource.data.maxScore is number && request.resource.data.maxScore > 0 &&
                         request.resource.data.status is string && (request.resource.data.status == 'started' || request.resource.data.status == 'completed') &&
                         request.resource.data.createdAt == request.time &&
                         request.resource.data.completedAt == (request.resource.data.status == 'completed' ? request.time : null) &&
                         request.resource.data.durationMinutes is number && request.resource.data.durationMinutes >= 0 &&
                         request.resource.data.isTestGen is bool &&
                         (
                           ( request.resource.data.isTestGen == false &&
                             (!('testGenConfig' in request.resource.data) || request.resource.data.testGenConfig == null) &&
                             request.resource.data.courseId is string &&
                             request.resource.data.keys().hasOnly([
                               'userId', 'examId', 'courseId', 'questions', 'answers', 'markingResults', 'score', 'maxScore',
                               'status', 'createdAt', 'completedAt', 'durationMinutes', 'isTestGen',
                               'examType' // This field is for non-TestGen exams (e.g., "assignment")
                             ]) && request.resource.data.examType is string
                           ) ||
                           ( request.resource.data.isTestGen == true &&
                             request.resource.data.courseId == null &&
                             request.resource.data.testGenConfig is map &&
                             isValidTestGenConfig(request.resource.data.testGenConfig) &&
                             request.resource.data.subjectId is string &&
                             request.resource.data.keys().hasOnly([
                               'userId', 'examId', 'courseId', 'subjectId', 'questions', 'answers', 'markingResults', 'score', 'maxScore',
                               'status', 'createdAt', 'completedAt', 'durationMinutes', 'isTestGen',
                               'testGenConfig'
                             ])
                           )
                         );
        // The original second definition of userExams update was 'if false'.
        // If you need to update exam status (e.g. from 'started' to 'completed'), you'll need a rule like:
        // allow update: if (isAdmin() || request.auth.uid == resource.data.userId) &&
        //                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedAt', 'answers', 'score', 'markingResults']) &&
        //                    request.resource.data.status == 'completed' &&
        //                    request.resource.data.completedAt == request.time &&
        //                    resource.data.status == 'started';
        // For now, sticking to the more restrictive one to avoid opening up too much.
        allow update: if false;
        allow delete: if isLoggedIn() && isOwner(userId);
      }
    } // End /userExams/{userId}


    match /feedback/{feedbackId} {
      allow create: if isLoggedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp == request.time &&
                       isValidString(request.resource.data.feedbackText, 1, 5000);
      allow read, update, delete: if isAdmin();
    }
    match /examIssues/{issueId} {
      allow create: if isLoggedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp == request.time &&
                       isValidString(request.resource.data.feedbackText, 1, 5000);
      allow read, update, delete: if isAdmin();
    }

    match /courses/{courseId} {
      allow read: if true;
      allow create: if isLoggedIn() &&
                       request.resource.data.creatorUid == request.auth.uid &&
                       ( ( request.resource.data.status == 'pending' && !isAdmin() ) ||
                         ( (request.resource.data.status == 'approved' || request.resource.data.status == 'pending') && isAdmin() )
                       ) &&
                       isValidString(request.resource.data.name, 1, 150) &&
                       request.resource.data.createdAt == request.time &&
                       isValidString(request.resource.data.creatorName, 1, 50) &&
                       isValidString(request.resource.data.courseDirName, 1, 100) &&
                       request.resource.data.totalChapters is number && request.resource.data.totalChapters >=0 &&
                       request.resource.data.chapters is list &&
                       (request.resource.data.relatedSubjectId == null || request.resource.data.relatedSubjectId is string) &&
                       request.resource.data.prerequisites is list &&
                       request.resource.data.corequisites is list &&
                       request.resource.data.youtubePlaylistUrls is list &&
                       (request.resource.data.imageUrl == null || request.resource.data.imageUrl is string) &&
                       (request.resource.data.coverUrl == null || request.resource.data.coverUrl is string) &&
                       request.resource.data.chapterResources is map;
      allow update: if isAdmin();
      allow delete: if isAdmin() && courseId != "fop_physics_v1"; // Be careful with this hardcoded value
    }

    match /sharedCourseNotes/{noteId} {
      allow read: if isLoggedIn();
      allow create: if isLoggedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isLoggedIn() && (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /adminTasks/{taskId} {
      allow read, create, update, delete: if isPrimaryAdmin();
    }
    match /taskVersions/{versionId} {
      allow read, write: if isPrimaryAdmin();
      match /tasks/{taskId} {
         allow read, write: if isPrimaryAdmin();
      }
    }

    match /globalChatMessages/{messageId} {
      allow read: if isLoggedIn();
      allow create: if isLoggedIn() &&
                       request.resource.data.senderId == request.auth.uid &&
                       isValidString(request.resource.data.text, 1, 1000) &&
                       request.resource.data.timestamp == request.time &&
                       request.resource.data.isPinned == false &&
                       request.resource.data.mentions is list;
      allow update: if isAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPinned']) &&
                       request.resource.data.isPinned is bool;
      allow delete: if isLoggedIn() && (resource.data.senderId == request.auth.uid || isAdmin());
    }

    match /settings/{settingDocId} {
      allow read: if isLoggedIn();
      allow write: if isAdmin() && settingDocId == 'courseExamDefaults';
    }

    match /globalFormulaSheets/{sheetId} {
      allow read: if true;
      allow write: if isPrimaryAdmin();
    }
    match /globalChapterSummaries/{summaryId} {
      allow read: if true;
      allow write: if isPrimaryAdmin();
    }

    match /subjects/{subjectId} {
      allow read: if isLoggedIn();
      allow write: if isAdmin();
    }

  } // End /databases/{database}/documents
}