rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper function for Admin Check ---
    function isAdmin() {
      // Ensure this is your correct Admin Firebase User ID
      return request.auth != null && request.auth.uid == "04amtH9UgfTWxPH0rqn2quaKiNf1";
    }

    // --- Usernames: Publicly readable, owner creates ---
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Prevent modification
    }

    // --- Users: Owner or Admin can manage profile and subcollections ---
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow create: if request.auth != null && request.auth.uid == userId; // Only the user can create their own doc

      // Inbox: Owner manages, Admin can send (create)
      match /inbox/{messageId} {
        allow read, update, delete: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && isAdmin();
      }

      // User-specific Formula Sheets: Owner manages, Admin can read
      match /userFormulaSheets/{sheetId} {
          allow read, write, delete: if request.auth != null && request.auth.uid == userId;
          allow read: if request.auth != null && isAdmin(); // Allow admin read (override)
      }

      // User-specific Chapter Summaries: Owner manages, Admin can read
      match /userChapterSummaries/{summaryId} {
          allow read, write, delete: if request.auth != null && request.auth.uid == userId;
          allow read: if request.auth != null && isAdmin(); // Allow admin read (override)
      }

      // Note: userNotes map is covered by the parent /users/{userId} rule
    }

    // --- User Course Progress: Owner or Admin can manage ---
    match /userCourseProgress/{userId}/{courses=**} { // Match any document in subcollections
       allow read, write, create, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // --- User Exam Storage: Owner manages, Admin can read ---
    match /userExams/{userId}/{exams=**} { // Match any document in subcollections
       // Owner can do anything with their exams
       allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
       // Admin can read any user's exams
       allow read: if request.auth != null && isAdmin();
       // Note: Admins cannot currently write/delete other users' exams with this rule.
    }

    // --- Feedback: Auth users create, Admin manages ---
    match /feedback/{feedbackId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && isAdmin();
    }

    // --- Exam Issues: Auth users create, Admin manages ---
    match /examIssues/{issueId} {
       allow create: if request.auth != null;
       allow read, update, delete: if request.auth != null && isAdmin();
    }

    // --- Course Definitions: Public read, Admin manages ---
    match /courses/{courseId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && isAdmin();
    }

    // --- Shared Notes: Public read, Auth create, Owner/Admin manage ---
    match /sharedCourseNotes/{noteId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid; // Creator sets correct UID
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
    }

    // --- Deprecated Global Caches: Read allowed, Write blocked (except Admin) ---
    match /globalFormulaSheets/{sheetId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin();
    }
    match /globalChapterSummaries/{summaryId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin();
    }
  }
}