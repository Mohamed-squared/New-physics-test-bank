rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions for Admin Checks ---
    function isPrimaryAdmin() {
      // Primary Admin Check (fixed UID)
      return request.auth != null && request.auth.uid == "04amtH9UgfTWxPH0rqn2quaKiNf1"; // <<< REPLACE WITH YOUR ACTUAL ADMIN_UID
    }

    function isAssignedAdmin() {
      // Assigned Admin Check (reads the user's own document)
      // This requires the user document to exist and have an 'isAdmin' field.
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function canPerformAdminActions() {
      // A user can perform general admin actions if they are the Primary Admin OR an Assigned Admin.
      return isPrimaryAdmin() || isAssignedAdmin();
    }

    // --- Usernames: Publicly readable, Owner or Primary Admin creates, Primary Admin deletes ---
    match /usernames/{username} {
        allow read: if true;
        allow create: if request.auth != null &&
                         (request.resource.data.userId == request.auth.uid || isPrimaryAdmin());
        allow delete: if request.auth != null && isPrimaryAdmin();
        allow update: if false; // Prevent direct updates to username registry
    }

    // --- Users Collection ---
    match /users/{userId} {
      // Read: Owner or any Admin (Primary or Assigned)
      allow read: if request.auth != null && (request.auth.uid == userId || canPerformAdminActions());

      // Create: Only the user themselves can create their document
      allow create: if request.auth != null && request.auth.uid == userId;

      // Delete: Owner or Primary Admin
      allow delete: if request.auth != null && (request.auth.uid == userId || isPrimaryAdmin());

      // Update:
      allow update: if request.auth != null &&
                       (
                         // Case 1: Owner updates their own document
                         (request.auth.uid == userId &&
                           // Owner CANNOT update 'isAdmin' or 'credits' fields directly
                           !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'credits'])
                         ) ||
                         // Case 2: Primary Admin updates OTHER users' documents
                         (isPrimaryAdmin() && userId != request.auth.uid &&
                           // Primary Admin CAN update 'isAdmin' and 'credits' for others, plus other fields
                           request.resource.data.diff(resource.data).affectedKeys()
                             .hasOnly(['username', 'displayName', 'photoURL', 'completedCourseBadges',
                                       'onboardingComplete', 'email', 'status', 'lastSelectedSubjectId',
                                       'isAdmin', 'credits', 'appData', 'userNotes'])
                         ) ||
                         // Case 3: Primary Admin updates THEIR OWN document
                         (isPrimaryAdmin() && userId == request.auth.uid &&
                           // Primary Admin CANNOT update their own 'isAdmin' status (it's inherent)
                           !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin'])
                         )
                         // Note: Assigned (non-primary) admins cannot update 'isAdmin' or 'credits' of any user
                         // based on these rules. They can update other allowed fields if `canPerformAdminActions()`
                         // were used here with a more general field list, but typically user profile updates
                         // are done by the owner or primary admin for sensitive fields.
                       );

      // --- User Subcollections ---
      match /inbox/{messageId} {
        allow read, update: if request.auth != null && request.auth.uid == userId; // Owner
        allow create: if request.auth != null && canPerformAdminActions();          // Any Admin can send (create)
        allow delete: if request.auth != null && (request.auth.uid == userId || canPerformAdminActions()); // Owner or any Admin
      }

      match /userFormulaSheets/{sheetId} {
        allow read, write: if request.auth != null && request.auth.uid == userId; // Owner
        allow read, delete: if request.auth != null && canPerformAdminActions();   // Any Admin can read/delete
      }

      match /userChapterSummaries/{summaryId} {
        allow read, write: if request.auth != null && request.auth.uid == userId; // Owner
        allow read, delete: if request.auth != null && canPerformAdminActions();   // Any Admin can read/delete
      }

      match /creditLog/{logId} {
        allow read: if request.auth != null && (request.auth.uid == userId || isPrimaryAdmin()); // Owner or Primary Admin
        allow create: if request.auth != null &&
                         (
                           (request.auth.uid == userId && request.resource.data.performedBy == userId) || // User action logging
                           isPrimaryAdmin() // Primary admin initiated action
                         );
        allow update, delete: if false; // Logs are immutable
      }
    }

    // --- User Course Progress: Owner or any Admin can manage ---
    match /userCourseProgress/{userId}/{courses=**} {
       allow read, write, create, delete: if request.auth != null && (request.auth.uid == userId || canPerformAdminActions());
    }

    // --- User Exam Storage: Owner manages read/write/create/delete, any Admin can read ---
    match /userExams/{userId}/{exams=**} {
       allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
       allow read: if request.auth != null && canPerformAdminActions();
    }

    // --- Feedback & Exam Issues: Authenticated users create, any Admin manages ---
    match /feedback/{feedbackId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && canPerformAdminActions();
    }
    match /examIssues/{issueId} {
       allow create: if request.auth != null;
       allow read, update, delete: if request.auth != null && canPerformAdminActions();
    }

    // --- Course Definitions ---
    match /courses/{courseId} {
      allow read: if true; // Publicly readable

      // Create: Authenticated user, status depends on role
      allow create: if request.auth != null &&
                       request.resource.data.creatorUid == request.auth.uid &&
                       (
                         (request.resource.data.status == 'pending' && !isPrimaryAdmin()) || // Non-Primary Admin creates as 'pending'
                         (request.resource.data.status == 'approved' && isPrimaryAdmin())    // Primary Admin can create as 'approved'
                       ) &&
                       // Fields allowed on creation (important for security)
                       request.resource.data.keys().hasOnly([
                         'name', 'description', 'majorTag', 'subjectTag', 'youtubePlaylistUrls',
                         'creatorUid', 'creatorName', 'createdAt', 'status', 'reportedBy',
                         'reportReason', 'chapterResources', 'imageUrl', 'coverUrl', 'courseDirName',
                         'prerequisites', 'corequisites', 'totalChapters', 'chapters', 'relatedSubjectId',
                         'creatorIsAdmin' // Store if creator was an admin at time of creation
                       ]);

      // Update & Delete: Only Primary Admin
      allow update, delete: if request.auth != null && isPrimaryAdmin();
    }

    // --- Shared Notes: Public read, Auth create, Owner/any Admin manage update/delete ---
    match /sharedCourseNotes/{noteId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.userId || canPerformAdminActions());
    }

    // --- Admin Tasks: Only Primary Admin can manage ---
    // (Assigned admins might view tasks, but only primary admin creates/updates/deletes them via these rules)
    match /adminTasks/{taskId} {
      allow read, write, create, delete: if request.auth != null && isPrimaryAdmin();
    }

    // --- Global Chat Messages ---
    match /globalChatMessages/{messageId} {
      allow read, create: if request.auth != null && request.auth.uid != null;
      allow delete: if request.auth != null && (request.auth.uid == resource.data.senderId || canPerformAdminActions());
      allow update: if request.auth != null && canPerformAdminActions() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPinned']);
    }

    // --- Settings Collection (e.g., chat auto-delete) ---
    match /settings/{settingDocId} {
      // Only Primary Admin can read or write these global settings
      allow read, write: if request.auth != null && isPrimaryAdmin();
    }

    // --- Deprecated Global Caches: Read allowed, Write by Primary Admin ---
    match /globalFormulaSheets/{sheetId} {
        allow read: if true;
        allow write: if request.auth != null && isPrimaryAdmin();
    }
    match /globalChapterSummaries/{summaryId} {
        allow read: if true;
        allow write: if request.auth != null && isPrimaryAdmin();
    }
  }
}