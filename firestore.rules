rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isLoggedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }

    // !!! Primary Admin UID is correctly set here !!!
    function isPrimaryAdmin() {
      return isLoggedIn() && request.auth.uid == "04amtH9UgfTWxPH0rqn2quaKiNf1";
    }

    function isAssignedAdmin() {
      // Checks if the requesting user's document has isAdmin == true
      return isLoggedIn() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isAnyAdmin() {
      // User is either the fixed Primary Admin OR is marked as Admin in their user doc
      return isPrimaryAdmin() || isAssignedAdmin();
    }

    // Function to check if a string is valid (non-empty and within length)
    function isValidString(str, minLength, maxLength) {
      return str is string && str.size() >= minLength && str.size() <= maxLength;
    }

    // Function to check if a value is a number within a range
    function isValidNumber(num, minVal, maxVal) {
        return num is number && num >= minVal && num <= maxVal;
    }

    // Function to check allowed fields for User document updates
    function allowedUserUpdateFields() {
      // Fields an owner can update on their own profile
      return ['displayName', 'photoURL', 'username', 'onboardingComplete', 'lastSelectedSubjectId', 'appData', 'userNotes', 'userAiChatSettings', 'completedCourseBadges'];
    }
    function allowedAdminUpdateFields() {
      // Fields an admin can update on any profile (including the owner fields)
      return allowedUserUpdateFields().concat(['isAdmin', 'credits']);
    }

    // --- Usernames Registry ---
    // Publicly readable for checks, creation requires owner or primary admin, deletion only by primary admin.
    match /usernames/{username} {
      allow read: if true;
      allow create: if isLoggedIn() &&
                       request.resource.data.userId is string && // Ensure userId is provided
                       (request.resource.data.userId == request.auth.uid || isPrimaryAdmin());
      allow update: if false; // Prevent modifications
      allow delete: if isPrimaryAdmin();
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if isOwner(userId) || isAnyAdmin();

      // --- CORRECTED CREATE RULE ---
      allow create: if isLoggedIn() && request.auth.uid == userId &&
                      // Validate essential fields on creation
                      request.resource.data.email == request.auth.token.email &&
                      isValidString(request.resource.data.username, 3, 20) &&
                      // REMOVED: request.resource.data.createdAt == request.time; // This check was causing the error
                      // We trust the client sends FieldValue.serverTimestamp()
                      request.resource.data.onboardingComplete == false &&
                      request.resource.data.isAdmin == (userId == "04amtH9UgfTWxPH0rqn2quaKiNf1") && // Correct UID used
                      request.resource.data.credits == 0 &&
                      request.resource.data.appData is map &&
                      request.resource.data.userNotes is map &&
                      request.resource.data.userAiChatSettings is map && // Ensure AI settings map exists
                      request.resource.data.completedCourseBadges is list; // Ensure badges list exists

      allow delete: if isOwner(userId) || isPrimaryAdmin();

      // Update rules require careful field control
      allow update: if isLoggedIn() &&
                     (
                       // Case 1: Owner updating own profile (cannot change isAdmin or credits directly)
                       ( isOwner(userId) &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'credits']) &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedUserUpdateFields())
                       ) ||
                       // Case 2: Primary Admin updating OTHER users (can change isAdmin/credits)
                       ( isPrimaryAdmin() && userId != request.auth.uid &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedAdminUpdateFields())
                       ) ||
                       // Case 3: Primary Admin updating OWN profile (cannot change own isAdmin, can change own credits)
                       ( isPrimaryAdmin() && userId == request.auth.uid &&
                         !request.resource.data.diff(resource.data).affectedKeys().has('isAdmin') && // Can't change own isAdmin
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedAdminUpdateFields()) // Can update own credits/other fields
                       )
                     );

      // --- User Subcollections ---

      // Inbox: Owner reads/updates (read status). Any Admin can create (send) or delete. Owner can delete.
      match /inbox/{messageId} {
        allow read: if isOwner(userId) || isAnyAdmin(); // Admin can read user inboxes
        allow create: if isAnyAdmin(); // Only Admins can send messages to a user's inbox
        allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']); // Only owner marks as read
        allow delete: if isOwner(userId) || isAnyAdmin(); // Owner or Admin can delete
      }

      // User-specific generated content: Owner R/W, Admin Read/Delete
      match /userFormulaSheets/{sheetId} {
        allow read: if isOwner(userId) || isAnyAdmin();
        allow create, update: if isOwner(userId);
        allow delete: if isOwner(userId) || isAnyAdmin();
      }
      match /userChapterSummaries/{summaryId} {
        allow read: if isOwner(userId) || isAnyAdmin();
        allow create, update: if isOwner(userId);
        allow delete: if isOwner(userId) || isAnyAdmin();
      }

      // Credit Log: Owner/Primary Admin read, creation tied to action performer, immutable.
      match /creditLog/{logId} {
        allow read: if isOwner(userId) || isPrimaryAdmin();
        allow create: if isLoggedIn() &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.change is number &&
                         request.resource.data.newBalance is number &&
                         request.resource.data.reason is string &&
                         request.resource.data.performedBy is string &&
                         ( // Performed by self OR primary admin
                           (request.resource.data.performedBy == request.auth.uid && request.auth.uid == userId) ||
                           isPrimaryAdmin()
                         );
        allow update, delete: if false; // Immutable
      }

      // AI Chat Sessions: Owner Full Control
      match /aiChatSessions/{sessionId} {
        allow read, write, create, delete: if isOwner(userId);
        // Add field validation if needed (e.g., history is list, name is string)
      }
    } // End /users/{userId}

    // --- User Course Progress ---
    // Owner or any Admin can manage entirely
    match /userCourseProgress/{userId}/{courses=**} { // Wildcard for courses subcollection path
      allow read, write, create, delete: if isLoggedIn() && (isOwner(userId) || isAnyAdmin());
      // Add validation for key fields like courseId, status, enrollmentDate, etc. if necessary
    }

    // --- User Exam Results ---
    // Owner manages R/W/C/D. Any Admin can read.
    match /userExams/{userId}/{exams=**} { // Wildcard for exams subcollection path
      allow read: if isLoggedIn() && (isOwner(userId) || isAnyAdmin());
      allow write, create, delete: if isLoggedIn() && isOwner(userId);
      // Add validation for key fields like examId, userId, timestamp, questions list, markingResults map, etc.
    }

    // --- Feedback & Exam Issues ---
    // Any logged-in user can create. Any Admin can manage.
    match /feedback/{feedbackId} {
      allow create: if isLoggedIn() &&
                       request.resource.data.userId == request.auth.uid && // Ensure user submits as themselves
                       request.resource.data.timestamp == request.time &&
                       isValidString(request.resource.data.feedbackText, 1, 2000); // Example validation
      allow read, update, delete: if isAnyAdmin(); // Update for status/reply
    }
    match /examIssues/{issueId} {
      allow create: if isLoggedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp == request.time &&
                       isValidString(request.resource.data.feedbackText, 1, 2000); // Example validation
      allow read, update, delete: if isAnyAdmin(); // Update for status/reply
    }

    // --- Course Definitions ---
    // Publicly readable. Creation logic based on role. Update/Delete by Admins only.
    match /courses/{courseId} {
      allow read: if true;

      allow create: if isLoggedIn() &&
                       request.resource.data.creatorUid == request.auth.uid &&
                       // Validate status based on creator's role
                       (
                         ( request.resource.data.status == 'pending' && !isAnyAdmin() ) || // Regular user creates as pending
                         ( (request.resource.data.status == 'approved' || request.resource.data.status == 'pending') && isAnyAdmin() ) // Admins can create as pending or approved
                       ) &&
                       // Validate required fields
                       isValidString(request.resource.data.name, 1, 100) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.creatorName is string &&
                       request.resource.data.courseDirName is string &&
                       request.resource.data.totalChapters is number &&
                       request.resource.data.chapters is list &&
                       request.resource.data.relatedSubjectId is string &&
                       request.resource.data.prerequisites is list && // Added validation
                       request.resource.data.corequisites is list;   // Added validation
                       // Add more validation for youtube URLs, image URLs etc. if needed

      allow update: if isAnyAdmin(); // Only Admins update course definitions
                       // Add detailed field validation if needed for updates

      allow delete: if isAnyAdmin() && resource.data.id != "fop_physics_v1"; // Any Admin can delete, EXCEPT FoP
    }

    // --- Shared Notes ---
    // Public read. Create by logged-in owner. Update/Delete by owner or any Admin.
    match /sharedCourseNotes/{noteId} {
      allow read: if true;
      allow create: if isLoggedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isLoggedIn() && (resource.data.userId == request.auth.uid || isAnyAdmin());
    }

    // --- Admin Tasks ---
    // Only Primary Admin full control.
    match /adminTasks/{taskId} {
      allow read, write, create, delete: if isPrimaryAdmin();
    }

    // --- Task Versions (Example - adjust path if needed) ---
    // Only Primary Admin full control.
    match /taskVersions/{versionId} {
      allow read, write, create, delete: if isPrimaryAdmin();
      // Nested tasks subcollection (assuming structure like taskVersions/{versionId}/tasks/{taskId})
      match /tasks/{taskId} {
         allow read, write, create, delete: if isPrimaryAdmin();
      }
    }

    // --- Global Chat ---
    match /globalChatMessages/{messageId} {
      allow read: if isLoggedIn(); // Must be logged in to read chat
      allow create: if isLoggedIn() &&
                       request.resource.data.senderId == request.auth.uid && // Must send as self
                       isValidString(request.resource.data.text, 1, 1000) && // Validate text length
                       request.resource.data.timestamp == request.time && // Use server time
                       request.resource.data.isPinned == false; // Cannot create pinned messages

      // Update only allowed for 'isPinned' field by Admins
      allow update: if isAnyAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPinned']) &&
                       request.resource.data.isPinned is bool; // Ensure isPinned is boolean

      allow delete: if isLoggedIn() && (resource.data.senderId == request.auth.uid || isAnyAdmin()); // Owner or Admin delete
    }

    // --- Settings ---
    match /settings/{settingDocId} {
      // AI Prompts: Logged-in read, Primary Admin write
      allow read: if settingDocId == 'aiPrompts' && isLoggedIn();
      allow write: if settingDocId == 'aiPrompts' && isPrimaryAdmin();

      // Chat Settings: Primary Admin read/write
      allow read, write: if settingDocId == 'chat' && isPrimaryAdmin();

      // Deny other documents in settings unless explicitly defined
      allow read, write: if false;
    }

    // --- Deprecated Global Caches ---
    match /globalFormulaSheets/{sheetId} {
      allow read: if true;
      allow write: if isPrimaryAdmin();
    }
    match /globalChapterSummaries/{summaryId} {
      allow read: if true;
      allow write: if isPrimaryAdmin();
    }


  } // End /databases/{database}/documents
}