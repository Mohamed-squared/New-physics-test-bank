rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isLoggedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isLoggedIn() && request.auth.uid == userId;
    }

    // !!! Primary Admin UID is correctly set here !!!
    function isPrimaryAdmin() {
      return isLoggedIn() && request.auth.uid == "04amtH9UgfTWxPH0rqn2quaKiNf1";
    }

    function isAssignedAdmin() {
      // Checks if the requesting user's document has isAdmin == true
      return isLoggedIn() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isAnyAdmin() {
      // User is either the fixed Primary Admin OR is marked as Admin in their user doc
      return isPrimaryAdmin() || isAssignedAdmin();
    }

    // Function to check if a string is valid (non-empty and within length)
    function isValidString(str, minLength, maxLength) {
      return str is string && str.size() >= minLength && str.size() <= maxLength;
    }

    // Function to check if a value is a number within a range
    function isValidNumber(num, minVal, maxVal) {
        return num is number && num >= minVal && num <= maxVal;
    }

    // Function to check allowed fields for User document updates
    function allowedUserUpdateFields() {
      // Fields an owner can update on their own profile
      return ['displayName', 'photoURL', 'username', 'onboardingComplete', 'lastSelectedSubjectId', 'appData', 'userNotes', 'userAiChatSettings', 'completedCourseBadges'];
    }
    function allowedAdminUpdateFields() {
      // Fields an admin can update on any profile (including the owner fields)
      return allowedUserUpdateFields().concat(['isAdmin', 'credits']);
    }

    // --- Usernames Registry ---
    match /usernames/{username} {
      allow read: if true; // Publicly readable to check for uniqueness
      allow create: if request.auth != null && // User must be authenticated
                       request.resource.data.userId is string && // userId field must be present
                       (
                         (request.resource.data.userId == request.auth.uid) || // Current user is creating their own username mapping
                         (isPrimaryAdmin()) // Or Primary Admin is creating it (e.g. fixing data)
                       );
      allow update: if false; // Usernames are immutable once created. Change involves delete & re-create.
      allow delete: if isPrimaryAdmin(); // Only Primary Admin can delete username entries directly.
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if isOwner(userId) || isAnyAdmin();

      // User creation: by the user themselves.
      // All fields must be present and correctly typed as per what initializeUserData sets.
      allow create: if isLoggedIn() && request.auth.uid == userId &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.username is string && request.resource.data.username.size() >= 3 && request.resource.data.username.size() <= 20 &&
                      request.resource.data.displayName is string &&
                      (request.resource.data.photoURL is string || request.resource.data.photoURL == null) &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.onboardingComplete == false &&
                      request.resource.data.isAdmin == (userId == "04amtH9UgfTWxPH0rqn2quaKiNf1") &&
                      request.resource.data.credits is number && request.resource.data.credits == 0 &&
                      request.resource.data.appData is map &&
                      request.resource.data.appData.subjects is map && // Specifically check sub-structure if critical
                      request.resource.data.userNotes is map &&
                      request.resource.data.userAiChatSettings is map &&
                      request.resource.data.userAiChatSettings.primaryModel is string &&
                      request.resource.data.userAiChatSettings.fallbackModel is string &&
                      request.resource.data.userAiChatSettings.customSystemPrompts is map &&
                      request.resource.data.completedCourseBadges is list;

      // User Deletion: Owner (self-deletion after re-auth) or Primary Admin.
      allow delete: if isOwner(userId) || isPrimaryAdmin();

      // User Updates:
      allow update: if isLoggedIn() &&
                     (
                       // Case 1: Owner updating own profile
                       ( isOwner(userId) &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'credits', 'email', 'createdAt']) && // Owner cannot change these critical fields
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedUserUpdateFields()) &&
                         // Additional validation for specific fields being updated by owner
                         (request.resource.data.displayName == null || isValidString(request.resource.data.displayName, 1, 50)) &&
                         (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                         (request.resource.data.appData == null || request.resource.data.appData is map) && // Allow clearing appData if needed, but mostly expect map
                         (request.resource.data.userNotes == null || request.resource.data.userNotes is map) &&
                         (request.resource.data.userAiChatSettings == null || (
                            request.resource.data.userAiChatSettings is map &&
                            request.resource.data.userAiChatSettings.primaryModel is string &&
                            request.resource.data.userAiChatSettings.fallbackModel is string &&
                            request.resource.data.userAiChatSettings.customSystemPrompts is map
                         ))
                       ) ||
                       // Case 2: Primary Admin updating OTHER users
                       ( isPrimaryAdmin() && userId != request.auth.uid &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'createdAt']) && // Primary admin also cannot change email/createdAt
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedAdminUpdateFields())
                       ) ||
                       // Case 3: Primary Admin updating OWN profile
                       ( isPrimaryAdmin() && userId == request.auth.uid &&
                         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin', 'email', 'createdAt']) && // Primary Admin cannot change own isAdmin status or email/createdAt
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedAdminUpdateFields())
                       )
                     );

      // --- User Subcollections ---
      match /inbox/{messageId} {
        allow read: if isOwner(userId) || isAnyAdmin();
        allow create: if isAnyAdmin(); // Only Admins send to inbox
        allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
        allow delete: if isOwner(userId) || isAnyAdmin();
      }

      match /userFormulaSheets/{sheetId} {
        allow read: if isOwner(userId) || isAnyAdmin();
        allow create, update: if isOwner(userId);
        allow delete: if isOwner(userId) || isPrimaryAdmin(); // Primary Admin can delete
      }
      match /userChapterSummaries/{summaryId} {
        allow read: if isOwner(userId) || isAnyAdmin();
        allow create, update: if isOwner(userId);
        allow delete: if isOwner(userId) || isPrimaryAdmin(); // Primary Admin can delete
      }

      match /creditLog/{logId} {
        allow read: if isOwner(userId) || isPrimaryAdmin();
        allow create: if isLoggedIn() &&
                         request.resource.data.timestamp == request.time &&
                         request.resource.data.change is number &&
                         request.resource.data.newBalance is number &&
                         isValidString(request.resource.data.reason, 1, 200) &&
                         request.resource.data.performedBy is string &&
                         (
                           (request.resource.data.performedBy == request.auth.uid && request.auth.uid == userId) || // User's own action (e.g. enrollment bonus)
                           isPrimaryAdmin() // Or Primary Admin awarding/deducting
                         );
        allow update, delete: if false;
      }

      match /aiChatSessions/{sessionId} {
        allow read, write, create, delete: if isOwner(userId);
        // Add field validation if needed
        // Example:
        // allow create: if isOwner(userId) &&
        //                  isValidString(request.resource.data.name, 1, 100) &&
        //                  request.resource.data.history is list &&
        //                  request.resource.data.createdAt == request.time &&
        //                  request.resource.data.lastModified == request.time;
        // allow update: if isOwner(userId) &&
        //                  isValidString(request.resource.data.name, 1, 100) &&
        //                  request.resource.data.history is list &&
        //                  request.resource.data.lastModified == request.time;
      }
    } // End /users/{userId}

    // --- User Course Progress ---
    match /userCourseProgress/{userId}/courses/{courseId} {
      allow read, write, create, delete: if isLoggedIn() && (isOwner(userId) || isAnyAdmin());
      // Example validation for create/update:
      // allow create: if isLoggedIn() && isOwner(userId) &&
      //                  request.resource.data.courseId == courseId &&
      //                  request.resource.data.enrollmentDate == request.time &&
      //                  request.resource.data.status == 'enrolled' &&
      //                  request.resource.data.enrollmentMode is string && (request.resource.data.enrollmentMode == 'full' || request.resource.data.enrollmentMode == 'viewer');
      // allow update: if isLoggedIn() && (isOwner(userId) || isAnyAdmin()); // Admins can update status/grade
    }

    // --- User Exam Results ---
    match /userExams/{userId}/exams/{examId} {
      allow read: if isLoggedIn() && (isOwner(userId) || isAnyAdmin());
      allow write, create, delete: if isLoggedIn() && isOwner(userId);
      // Example validation for create:
      // allow create: if isLoggedIn() && isOwner(userId) &&
      //                  request.resource.data.userId == userId &&
      //                  request.resource.data.examId == examId &&
      //                  request.resource.data.questions is list &&
      //                  request.resource.data.markingResults is map;
    }

    // --- Feedback & Exam Issues ---
    match /feedback/{feedbackId} {
      allow create: if isLoggedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp == request.time &&
                       isValidString(request.resource.data.feedbackText, 1, 2000);
      allow read, update, delete: if isAnyAdmin();
    }
    match /examIssues/{issueId} {
      allow create: if isLoggedIn() &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp == request.time &&
                       isValidString(request.resource.data.feedbackText, 1, 2000);
      allow read, update, delete: if isAnyAdmin();
    }

    // --- Course Definitions ---
    match /courses/{courseId} {
      allow read: if true; // Publicly readable

      allow create: if isLoggedIn() &&
                       request.resource.data.creatorUid == request.auth.uid &&
                       (
                         ( request.resource.data.status == 'pending' && !isAnyAdmin() ) ||
                         ( (request.resource.data.status == 'approved' || request.resource.data.status == 'pending') && isAnyAdmin() )
                       ) &&
                       isValidString(request.resource.data.name, 1, 100) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.creatorName is string &&
                       request.resource.data.courseDirName is string &&
                       request.resource.data.totalChapters is number &&
                       request.resource.data.chapters is list &&
                       request.resource.data.relatedSubjectId is string &&
                       request.resource.data.prerequisites is list &&
                       request.resource.data.corequisites is list &&
                       request.resource.data.youtubePlaylistUrls is list &&
                       (request.resource.data.imageUrl == null || request.resource.data.imageUrl is string) &&
                       (request.resource.data.coverUrl == null || request.resource.data.coverUrl is string) &&
                       request.resource.data.chapterResources is map;

      allow update: if isAnyAdmin(); // Only Admins can update course definitions

      allow delete: if isAnyAdmin() && resource.data.id != "fop_physics_v1"; // Any Admin can delete, EXCEPT FoP
    }

    // --- Shared Notes ---
    match /sharedCourseNotes/{noteId} {
      allow read: if true;
      allow create: if isLoggedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isLoggedIn() && (resource.data.userId == request.auth.uid || isAnyAdmin());
    }

    // --- Admin Tasks ---
    match /adminTasks/{taskId} {
      allow read, write, create, delete: if isPrimaryAdmin();
    }

    // --- Task Versions (Example - adjust path if needed) ---
    match /taskVersions/{versionId} {
      allow read, write, create, delete: if isPrimaryAdmin();
      match /tasks/{taskId} {
         allow read, write, create, delete: if isPrimaryAdmin();
      }
    }

    // --- Global Chat ---
    match /globalChatMessages/{messageId} {
      allow read: if isLoggedIn();
      allow create: if isLoggedIn() &&
                       request.resource.data.senderId == request.auth.uid &&
                       isValidString(request.resource.data.text, 1, 1000) &&
                       request.resource.data.timestamp == request.time &&
                       request.resource.data.isPinned == false;

      allow update: if isAnyAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPinned']) &&
                       request.resource.data.isPinned is bool;

      allow delete: if isLoggedIn() && (resource.data.senderId == request.auth.uid || isAnyAdmin());
    }

    // --- Settings ---
    match /settings/{settingDocId} {
      allow read: if (settingDocId == 'aiPrompts' && isLoggedIn()) ||
                     (settingDocId == 'chat' && isPrimaryAdmin()); // Chat settings readable only by primary admin
      allow write: if (settingDocId == 'aiPrompts' && isPrimaryAdmin()) ||
                      (settingDocId == 'chat' && isPrimaryAdmin());

      // Deny other documents in settings unless explicitly defined above
      allow read, write: if false;
    }

    // --- Deprecated Global Caches (consider removing if not used) ---
    match /globalFormulaSheets/{sheetId} {
      allow read: if true;
      allow write: if isPrimaryAdmin();
    }
    match /globalChapterSummaries/{summaryId} {
      allow read: if true;
      allow write: if isPrimaryAdmin();
    }

  } // End /databases/{database}/documents
}